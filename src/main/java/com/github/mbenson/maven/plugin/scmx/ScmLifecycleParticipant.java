package com.github.mbenson.maven.plugin.scmx;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collection;
import java.util.Optional;
import java.util.function.Function;
import java.util.stream.Stream;
import javax.inject.Named;
import org.apache.maven.AbstractMavenLifecycleParticipant;
import org.apache.maven.MavenExecutionException;
import org.apache.maven.execution.MavenSession;
import org.apache.maven.model.Scm;
import org.apache.maven.project.MavenProject;
import org.codehaus.plexus.component.annotations.Requirement;
import org.codehaus.plexus.logging.Logger;
import org.eclipse.jgit.api.Git;
import org.eclipse.jgit.api.errors.GitAPIException;
import org.eclipse.jgit.transport.RemoteConfig;
import org.eclipse.jgit.transport.URIish;

/**
 * {@link AbstractMavenLifecycleParticipant} for autogenerated SCM model.
 */
@Named("ScmLifecycleParticipant")
public class ScmLifecycleParticipant extends AbstractMavenLifecycleParticipant {

    @SafeVarargs
    private static <T, R> Stream<R> flatten(T subject, Function<? super T, ? extends Collection<R>>... fns) {
        return Stream.of(fns).map(fn -> fn.apply(subject)).flatMap(Collection::stream);
    }

    private static MavenProject getRootProject(MavenSession session) {
        Path localRepo = Paths.get(session.getLocalRepository().getBasedir());

        MavenProject project = session.getTopLevelProject();
        while (true) {
            MavenProject parent = project.getParent();
            if (Optional.ofNullable(parent).map(MavenProject::getFile).map(File::toPath).filter(path -> !path.startsWith(localRepo)).isPresent()) {
                project = parent;
                continue;
            }
            break;
        }
        return project;
    }

    private @Requirement(role = Logger.class) Logger logger;

    /**
     * {@inheritDoc}
     */
    @Override
    public void afterProjectsRead(MavenSession session) throws MavenExecutionException {
        super.afterProjectsRead(session);
        MavenProject rootProject = getRootProject(session);
        if (rootProject.getScm() != null) {
            return;
        }
        URIish uri;

        try {
            uri = getRemoteUri(rootProject);
        } catch (IOException | GitAPIException e) {
            logger.info(e.getMessage());
            uri = null;
        }
        if (uri == null) {
            return;
        }
        Scm scm = new Scm();
        String connection = String.format("scm:git:ssh://%s@%s:/%s", uri.getUser(), uri.getHost(), uri.getPath());
        scm.setConnection(connection);
        scm.setDeveloperConnection(connection);

        String url = String.format("https://%s/%s", uri.getHost(), uri.getPath().replaceFirst("\\.git$", ""));
        scm.setUrl(url);

        session.getProjects().stream().forEach(p -> p.setScm(scm));
    }

    private URIish getRemoteUri(MavenProject p) throws IOException, GitAPIException {
        try (Git git = Git.open(p.getBasedir())) {
            for (RemoteConfig remoteConfig : git.remoteList().call()) {
                if (!"origin".equals(remoteConfig.getName())) {
                    continue;
                }
                Optional<URIish> first = flatten(remoteConfig, RemoteConfig::getURIs, RemoteConfig::getPushURIs).findFirst();
                if (first.isPresent()) {
                    return first.get();
                }
            }
        }
        return null;
    }
}
